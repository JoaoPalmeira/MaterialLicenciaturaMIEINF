#BlueJ class context
comment0.params=
comment0.target=EmpresaPOO()
comment1.params=nome
comment1.target=EmpresaPOO(java.lang.String)
comment10.params=cod
comment10.target=void\ remEmpregado(java.lang.String)
comment10.text=\r\n\ Inserir\ todos\ os\ empregados\ de\ um\ conjunto\ dado.\r\n
comment11.params=
comment11.target=double\ totalSalarios()
comment11.text=\r\n\ Calcular\ o\ total\ de\ sal\u00E1rios\ a\ pagar.\r\n
comment12.params=
comment12.target=long\ totalGestores()
comment12.text=\r\n\ Calcular\ o\ n\u00FAmero\ total\ de\ gestores\ da\ empresa.\r\n
comment13.params=nomeClasse
comment13.target=long\ qtsDeTipo(java.lang.String)
comment13.text=\r\n\ Calcular\ o\ total\ de\ empregados\ do\ tipo\ dado\ \r\n\ (fornecido\ como\ par\u00E2metro\ sob\ a\ forma\ de\ String).\r\n
comment14.params=
comment14.target=double\ qtsKmsTotal()
comment14.text=\r\n\ Total\ de\ Km\ percorridos\ po\ todos\ os\ Motoristas.\r\n
comment15.params=
comment15.target=java.util.Set\ ordenaSalario()
comment15.text=\r\n\ Ordenar\ os\ Empregados\ por\ ordem\ decrescente\ de\ sal\u00E1rio,\ \r\n\ de\ acordo\ com\ a\ compara\u00E7\u00E3o\ do\ Comparator\ ComparatorSalario.\r\n\ \r\n
comment16.params=
comment16.target=java.util.Set\ ordenaPorNome()
comment16.text=\r\n\ Ordenar\ os\ Empregados\ por\ nome.\r\n
comment17.params=criterio
comment17.target=java.util.Set\ ordenaPorCriterio(java.util.Comparator)
comment17.text=\r\n\ M\u00E9todo\ geral\ que,\ dado\ um\ comparador,\ produz\ um\ conjunto\ ordenado\r\n\ de\ acordo\ com\ o\ crit\u00E9rio\ pretendido.\r\n\ \r\n\ Quem\ invoca\ o\ m\u00E9todo\ tem\ de\ previamente\ criar\ um\ comparador\ de\ Empregado\r\n\ pass\u00E1-lo\ como\ par\u00E2metro\ a\ este\ m\u00E9todo.\r\n
comment18.params=
comment18.target=java.util.Set\ top3Salarios()
comment18.text=\r\n\ Tr\u00EAs\ funcion\u00E1rios\ com\ maior\ sal\u00E1rio\ (por\ ordem\ do\ sal\u00E1rio).\r\n
comment19.params=
comment19.target=java.lang.String\ toString()
comment2.params=nome\ emps
comment2.target=EmpresaPOO(java.lang.String,\ java.util.Map)
comment20.params=obj
comment20.target=boolean\ equals(java.lang.Object)
comment21.params=
comment21.target=EmpresaPOO\ clone()
comment22.params=fich
comment22.target=void\ gravaObj(java.lang.String)
comment23.params=fich
comment23.target=EmpresaPOO\ leObj(java.lang.String)
comment24.params=f\ ap
comment24.target=void\ log(java.lang.String,\ boolean)
comment3.params=ez
comment3.target=EmpresaPOO(EmpresaPOO)
comment4.params=
comment4.target=java.lang.String\ getNome()
comment5.params=
comment5.target=java.util.TreeMap\ getEmpregados()
comment6.params=cod
comment6.target=boolean\ existeEmpregado(java.lang.String)
comment6.text=\r\n\ Verificar\ se\ um\ empregado\ de\ c\u00F3digo\ dado\ existe.\r\n
comment7.params=cod
comment7.target=Empregado\ getEmpregado(java.lang.String)
comment7.text=\r\n\ Devolver\ a\ ficha\ de\ um\ empregado\ dado\ o\ seu\ c\u00F3digo.\r\n
comment8.params=e
comment8.target=void\ addEmpregado(Empregado)
comment8.text=\r\n\ Inserir\ um\ novo\ empregado.\r\n
comment9.params=emps
comment9.target=void\ addEmpregados(java.util.Set)
comment9.text=\r\n\ Devolver\ uma\ c\u00F3pia\ da\ lista\ de\ empregados.\r\n
numComments=25
