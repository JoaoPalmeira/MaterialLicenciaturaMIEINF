#BlueJ class context
comment0.target=JavaFatura
comment0.text=\n\n\ \n
comment1.params=
comment1.target=JavaFatura()
comment10.params=act\ contribuinte
comment10.target=void\ associarActEmp(ActividadeEconomica,\ int)
comment10.text=\n\ Adicionar\ uma\ AtividadeEconomica\ de\ uma\ Empresa\n
comment11.params=act\ contribuinte
comment11.target=void\ associarActCont(ActividadeEconomica,\ int)
comment11.text=\n\ Adicionar\ uma\ AtividadeEconomica\ de\ contribuinte\ individual\n
comment12.params=d
comment12.target=void\ criaFaturaAss(Despesa)
comment12.text=\n\ Cria\ fatura\ associada\ a\ um\ contribuinte\ individual\n
comment13.params=cF
comment13.target=void\ validaFact(int)
comment13.text=\n\ Valida\ as\ faturas\ automaticamente\n
comment14.params=nif\ id
comment14.target=void\ adicionaId(int,\ int)
comment14.text=\n\ Adicionar\ um\ id\ de\ despesa\n
comment15.params=nifC
comment15.target=java.util.List\ consultaFat(int)
comment15.text=\n\ Consulta\ as\ faturas\ de\ uma\ dado\ contribuinte\ \n
comment16.params=nifC
comment16.target=java.lang.Double\ consultaDeducoes(int)
comment16.text=\n\ Consulta\ as\ dedu\u00E7oes\ do\ contribuinte\ e\ do\ seu\ agregrado\n
comment17.params=despesas
comment17.target=double\ calcula(java.util.List)
comment18.params=total\ nifE\ nifC\ d
comment18.target=double\ reducaoImposto(double,\ int,\ int,\ Despesa)
comment18.text=\n\ Reduz\ os\ impostos\ para\ uma\ familia\ numerosa\ e\ para\ uma\ empresa\ do\ interior\ (Requisito\ avan\u00E7ado)\n
comment19.params=cidade\ perc
comment19.target=void\ adicionaConcelho(java.lang.String,\ double)
comment19.text=\n\ Adiciona\ concelhos\ interiores\n
comment2.params=untilizadores\ faturasS\ desp\ concelhoS
comment2.target=JavaFatura(java.util.Map,\ java.util.Map,\ java.util.Map,\ java.util.Map)
comment20.params=nFis
comment20.target=java.util.Map\ factValiDedu(java.util.List)
comment20.text=\n\ Da\ as\ faturas\ validas\ de\ um\ determinado\ contribuinte\ e\ do\ seu\ agregrado\n
comment21.params=factVali
comment21.target=java.util.Map\ factDedu(java.util.Map)
comment21.text=\n\ Da\ as\ faturas\ deduziveis\ de\ um\ determinado\ contribuinte\ e\ do\ seu\ agregrado\n
comment22.params=nifC
comment22.target=java.util.List\ faturasInvalidas(int)
comment22.text=\n\ Faturas\ nao\ validas\ de\ um\ contribuinte\n
comment23.params=id\ despInv
comment23.target=java.util.Map\ codActiEmp(int,\ java.util.List)
comment23.text=\n\ Codigos\ de\ actividades\ de\ uma\ empresa\ de\ uma\ despesa\n
comment24.params=nif
comment24.target=java.util.Map\ codActiCont(int)
comment24.text=\n\ Codigos\ de\ actividades\ de\ um\ contribuinte\ \n
comment25.params=id\ ae\ nif
comment25.target=int\ corrigeFact(int,\ ActividadeEconomica,\ int)
comment25.text=\n\ Corrige\ fatura\ de\ uma\ contribuinte\n
comment26.params=nif
comment26.target=java.util.List\ ordenaDataFact(int)
comment26.text=\n\ Consulta\ as\ faturas\ de\ uma\ empresa\ por\ ordem\ de\ data\n
comment27.params=nif
comment27.target=java.util.List\ ordenaValorFact(int)
comment27.text=\n\ Consulta\ as\ faturas\ de\ uma\ empresa\ por\ ordem\ de\ valor\n
comment28.params=nifE\ nifC\ d1\ d2
comment28.target=java.util.List\ consuFactData(int,\ int,\ java.time.LocalDate,\ java.time.LocalDate)
comment28.text=\n\ Consulta\ as\ faturas\ de\ um\ contribuinte\ entre\ duas\ datas\n
comment29.params=nifE\ nifC
comment29.target=java.util.List\ consuFactValor(int,\ int)
comment29.text=\n\ Consulta\ das\ faturas\ de\ um\ contribuinte\ por\ valor\ ordendas\ decrescente\n
comment3.params=jf
comment3.target=JavaFatura(JavaFatura)
comment30.params=nifE\ d1\ d2
comment30.target=double\ totalFact(int,\ java.time.LocalDate,\ java.time.LocalDate)
comment30.text=\n\ Total\ faturado\ por\ uma\ empresa\ num\ periodo\n
comment31.params=
comment31.target=java.util.Map\ topCliente()
comment31.text=\n\ 10\ contribuintes\ que\ mais\ gastam\ na\ aplicacao\n
comment32.params=
comment32.target=java.util.Map\ topEmpresas()
comment32.text=\n\ X\ empresas\ com\ mais\ faturas\ na\ aplicacao\ e\ o\ montante\ das\ dedu\u00E7oes\n
comment33.params=unsortedMap
comment33.target=java.util.Map\ sortByValue(java.util.Map)
comment33.text=\n\ Funcao\ auxiliar\ para\ ordenar\ um\ map\n
comment34.params=nif
comment34.target=boolean\ verificaNifExiste(int)
comment34.text=\n\ Verifica\ se\ um\ nif\ existe\n
comment35.params=o
comment35.target=boolean\ equals(java.lang.Object)
comment36.params=
comment36.target=java.lang.String\ toString()
comment37.params=
comment37.target=JavaFatura\ clone()
comment4.params=
comment4.target=java.util.Map\ getUtilizadores()
comment5.params=
comment5.target=java.util.Map\ getFaturas()
comment6.params=
comment6.target=java.util.Map\ getDespesasAlt()
comment7.params=untilizadores
comment7.target=void\ setUtilizadores(java.util.Map)
comment8.params=contribuinte\ pass
comment8.target=int\ iniciaSessao(int,\ java.lang.String)
comment8.text=\n\ Inicia\ Sessao\ na\ aplicacao\n
comment9.params=u
comment9.target=void\ adicionaU(Utilizador)
comment9.text=\n\ Adicionar\ um\ utilizador\n
numComments=38
